# Autogenerated wrapper script for Lz4_jll for powerpc64le-linux-gnu
export liblz4, lz4, lz4c, lz4cat, unlz4

## Global variables
PATH = ""
LIBPATH = ""
LIBPATH_env = "LD_LIBRARY_PATH"
LIBPATH_default = ""

# Relative path to `liblz4`
const liblz4_splitpath = ["lib", "liblz4.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
liblz4_path = ""

# liblz4-specific global declaration
# This will be filled out by __init__()
liblz4_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const liblz4 = "liblz4.so.1"


# Relative path to `lz4`
const lz4_splitpath = ["bin", "lz4"]

# This will be filled out by __init__() for all products, as it must be done at runtime
lz4_path = ""

# lz4-specific global declaration
function lz4(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(lz4_path)
    end
end


# Relative path to `lz4c`
const lz4c_splitpath = ["bin", "lz4c"]

# This will be filled out by __init__() for all products, as it must be done at runtime
lz4c_path = ""

# lz4c-specific global declaration
function lz4c(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(lz4c_path)
    end
end


# Relative path to `lz4cat`
const lz4cat_splitpath = ["bin", "lz4cat"]

# This will be filled out by __init__() for all products, as it must be done at runtime
lz4cat_path = ""

# lz4cat-specific global declaration
function lz4cat(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(lz4cat_path)
    end
end


# Relative path to `unlz4`
const unlz4_splitpath = ["bin", "unlz4"]

# This will be filled out by __init__() for all products, as it must be done at runtime
unlz4_path = ""

# unlz4-specific global declaration
function unlz4(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(unlz4_path)
    end
end


"""
Open all libraries
"""
function __init__()
    global artifact_dir = abspath(artifact"Lz4")

    # Initialize PATH and LIBPATH environment variable listings
    global PATH_list, LIBPATH_list
    global liblz4_path = normpath(joinpath(artifact_dir, liblz4_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global liblz4_handle = dlopen(liblz4_path)
    push!(LIBPATH_list, dirname(liblz4_path))

    global lz4_path = normpath(joinpath(artifact_dir, lz4_splitpath...))

    push!(PATH_list, dirname(lz4_path))
    global lz4c_path = normpath(joinpath(artifact_dir, lz4c_splitpath...))

    push!(PATH_list, dirname(lz4c_path))
    global lz4cat_path = normpath(joinpath(artifact_dir, lz4cat_splitpath...))

    push!(PATH_list, dirname(lz4cat_path))
    global unlz4_path = normpath(joinpath(artifact_dir, unlz4_splitpath...))

    push!(PATH_list, dirname(unlz4_path))
    # Filter out duplicate and empty entries in our PATH and LIBPATH entries
    filter!(!isempty, unique!(PATH_list))
    filter!(!isempty, unique!(LIBPATH_list))
    global PATH = join(PATH_list, ':')
    global LIBPATH = join(vcat(LIBPATH_list, [joinpath(Sys.BINDIR, Base.LIBDIR, "julia"), joinpath(Sys.BINDIR, Base.LIBDIR)]), ':')

    
end  # __init__()

